positive:
we did make it compile and run on the circleci but the compile time takes about 9 minutes.
i have been surprised when i saw that the ruby process takes over 4gb of memory, and this is what triggers circleci to kill the process.
there would be no good way to limit to just circleci without having to constantly update your ec2s firewall.
if circleci fails, my dropletâ€™s cpu stays over 100% and /code_segment/ keeps running.
but as soon as circleci starts a docker instance (see config.yml below), it needs at least 5 minutes to run the script, if i am lucky.
negative:
alternatively, if you do n't have frequent builds, you can create a circleci scheduled workflow that runs once an hour with a single job of pruning old k8s pods.
with the current setup, /code_segment/ does n't have to be installed fully every time for every build due to circleci caching.
